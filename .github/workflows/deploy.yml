name: Deploy to AWS EC2 with Docker

on:
  push:
    branches:
      - QA  # O la rama que usas para despliegues

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t my-app .

      - name: Push Docker image to Docker Hub
        run: |
          docker tag my-app ${{ secrets.DOCKER_USERNAME }}/my-app:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:latest

      - name: Deploy to AWS EC2
        env:
          EC2_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
        run: |
          # Guardar la clave privada
          echo "$EC2_PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem
          
          # Configurar SSH para mantener la conexi칩n activa
          mkdir -p ~/.ssh
          echo -e "Host *\n\tStrictHostKeyChecking no\n\tUserKnownHostsFile=/dev/null\n\tServerAliveInterval 60\n\tServerAliveCountMax 3" > ~/.ssh/config

          # Conexi칩n SSH a EC2 y despliegue
          ssh -i private_key.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            set -e

            # Instalar Docker si no est치 instalado (para Amazon Linux 2023)
            if ! command -v docker &> /dev/null; then
              echo "Docker no encontrado. Instalando Docker..."
              sudo dnf install -y docker
              sudo systemctl enable --now docker
              sudo usermod -aG docker ec2-user
              newgrp docker
            fi

            # Detener y eliminar cualquier contenedor previo
            docker ps -q | xargs -r docker stop
            docker ps -aq | xargs -r docker rm

            # Eliminar im치genes antiguas
            docker images -q ${{ secrets.DOCKER_USERNAME }}/my-app | xargs -r docker rmi -f

            # Descargar la nueva imagen
            docker pull ${{ secrets.DOCKER_USERNAME }}/my-app:latest

            # Correr el contenedor con la nueva imagen
            docker run -d -p 80:80 --name my-app ${{ secrets.DOCKER_USERNAME }}/my-app:latest
          EOF
